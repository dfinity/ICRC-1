type Account = record {
    owner : principal;
    subaccount : opt blob;
};

type ApproveArgs = record {
    from_subaccount : opt blob;
    spender : principal;
    amount : nat;
    expires_at : opt nat64;
    fee : opt nat;
    memo : opt blob;
    created_at_time : opt nat64;
};

type ApproveError = variant {
    BadFee : record { expected_fee : nat };
    InsufficientFunds : record { balance : nat };
    Expired : record { ledger_time : nat64 };
    TooOld;
    CreatedInFuture: record { ledger_time : nat64 };
    Duplicate : record { duplicate_of : nat };
    TemporarilyUnavailable;
    GenericError : record { error_code : nat; message : text };
};

type TransferFromArgs = record {
    from : Account;
    to : Account;
    amount : nat;
    fee : opt nat;
    memo : opt blob;
    created_at_time : opt nat64;
};

type TransferFromError = variant {
    BadFee : record { expected_fee : nat };
    BadBurn : record { min_burn_amount : nat };
    InsufficientFunds : record { balance : nat };
    InsufficientAllowance : record { allowance : nat };
    TooOld;
    CreatedInFuture: record { ledger_time : nat64 };
    Duplicate : record { duplicate_of : nat };
    TemporarilyUnavailable;
    GenericError : record { error_code : nat; message : text };
};

type AllowancesArgs = record {
    account : Account;
    spender : principal;
    start : opt nat;
};

type AllowancesData = record {
    latest_approval_id : opt nat;
    total_allowance : nat;
    allowances : vec Allowance;
};

type Allowance = record {
  approval_id: nat;
  allowance : nat;
  expires_at : opt nat64;
};


type CancelApprovalError = variant {
    ApprovalNotFound;
    CallerIsNotTheApprover;
    ApprovalIsExpired;
    ApprovalIsCanceled : record { cancellation: nat; };
};

service : {
    icrc1_supported_standards : () -> (vec record { name : text; url : text }) query;

    icrc2_approve : (ApproveArgs) -> (variant { Ok : nat; Err : ApproveError });
    icrc2_transfer_from : (TransferFromArgs) -> (variant { Ok : nat; Err : TransferFromError });
    icrc2_allowances : (AllowancesArgs) -> (AllowancesData) query;
    icrc2_cancel_approval : (nat) -> (variant { Ok : nat; Err : CancelApprovalError });
}
